// Copyright Â© 2023 Niklas Siemer
//
// This file is part of qFALL-crypto.
//
// qFALL-crypto is free software: you can redistribute it and/or modify it under
// the terms of the Mozilla Public License Version 2.0 as published by the
// Mozilla Foundation. See <https://mozilla.org/en-US/MPL/2.0/>.

use crate::SizeN;
use criterion::*;
use performed_functions::*;

/// This module contains all values and functions loading or storing precomputed values.
pub(super) mod load_precomputed_values {
    use crate::SizeN;
    use qfall_crypto::construction::pk_encryption::RingLPR;
    use qfall_math::integer::PolyOverZ;
    use qfall_math::integer_mod_q::PolynomialRingZq;

    // The pre-computed values were computed with the following code:
    //
    // let scheme = RingLPR::secure128(); // Regev::default();
    // let (pk, sk) = scheme.gen();
    // let message = 1000; // 25...
    // let cipher = scheme.enc(&pk, message);
    // println!("PK0: {}", serde_json::to_string(&pk.0).unwrap());
    // println!("PK1: {}", serde_json::to_string(&pk.1).unwrap());
    // println!("SK: {}", serde_json::to_string(&sk).unwrap());
    // println!("C0: {}", serde_json::to_string(&cipher.0).unwrap());
    // println!("C1: {}", serde_json::to_string(&cipher.1).unwrap());

    /// This was previously generated by [`RingLPR::gen`]
    /// with the security parameters set in [`RingLPR::secure128`].
    const LARGE_PK0: &str = "{\"poly\":\"512  6022903 3723196 84569092 12389511 66561079 54543132 92037484 20572884 50195936 26705976 82856809 53677548 54331331 66869795 60596028 58167525 71327781 1101918 24540674 18106471 64453323 38026096 70790795 44936892 60919586 78302585 53188704 17068014 23844422 77514601 8353130 85792637 73011584 54552137 50318832 62858449 66961707 67401267 54623614 22218489 75373399 59490003 88061602 26364845 4862645 92399031 68195259 72354400 54497181 33650660 41401225 23332849 47152649 11145255 46807260 5972626 56542555 53689433 25100620 56471996 62034608 67228052 72733292 16088144 22677095 13407616 14427433 15785073 55448866 64161815 36995046 47291115 59419068 76472395 51916364 45299333 80399451 56493320 34046078 65186388 27496632 89212917 73969773 8708560 44587608 60801887 65473054 28301099 30018268 24828719 76932401 52966643 56878097 66711530 71348529 76191960 3992113 16868516 61092812 77757608 59697972 40574871 33406765 49094405 52076980 78107818 3736935 66727142 3631993 49164545 27122159 2411096 87185081 26581346 58863085 18337887 30954058 4150997 4445553 21394138 84384515 75416609 78056698 71344702 28684820 29178337 50297841 39928428 54248227 53392803 13565764 78559715 37943078 60492307 84481681 35753815 78240883 63817490 81360769 48558838 57533528 71746713 67961666 65867340 9540304 13677106 12730645 60662848 56544088 6418904 56009494 44739322 80515092 32073647 47939859 22787407 11892561 63848390 21465556 50979077 73569780 49218951 3397525 34290365 92788610 20135073 5708401 81122916 65288441 19183497 12194947 74944930 78110665 55713396 64836948 82948178 82392189 80348703 13091429 16537571 28523203 56415594 52318523 38855189 70158090 91770055 46586539 74993580 22862135 40069112 67171718 23976047 26808811 40719731 63077026 49306550 84975623 67619507 92536260 49121230 34091697 71911227 16299605 78001062 2594634 30953023 80123432 62944594 55653346 61441215 73568042 24980986 14828884 55089628 55050668 70990560 46838871 52907405 23907531 6546518 1242457 67168672 15850320 23345906 6128635 23752062 38601718 67855498 50403576 81899196 70833756 26170206 92125762 72617678 8805563 31698131 55049905 87503078 31711331 13929493 67428740 26782899 80632642 55085086 71330359 5510841 39549117 47668062 8054414 60133144 3977509 49988560 6132017 8942257 72859536 24292110 60928824 26389413 47155245 17470234 61399580 71361792 46240962 32517837 48720795 83047250 24844689 9173856 28049592 33071141 31908987 5636031 26350980 78811596 23582264 10061719 37490140 39997002 29151082 52761302 90967695 42822883 42204422 22482987 46674812 80782632 15510611 20017335 74747531 53116712 25940019 92818987 81035431 63119139 422440 68878886 75333410 77293603 41141547 83203318 21361070 92082423 73367510 39897286 26123207 13043331 52139348 82520994 78340740 53413734 88355538 84396174 82247860 11585366 8252961 2520142 56029962 19974849 78619484 60618225 73393597 67546165 21004921 53250858 12347361 42132026 21961346 10433677 5375241 73074480 76302602 83742758 55344059 56106028 45437058 39839534 33685238 56076577 88223410 11258415 87404750 13961165 40212667 8791760 70167954 52066968 4421881 23391756 50794215 25257756 84755661 70591604 17354866 47908906 33607995 69692057 31561454 84343526 82248718 56790341 74426028 85006096 33081759 49469639 76160135 24050718 10896378 56526566 29592005 15032920 16754061 36882444 13577453 74044319 4011174 65932557 59146756 80987745 45761964 10610454 13397730 20173285 80545807 7611338 16311320 40059461 10299710 41349998 48131787 2158641 90174574 18213624 83580890 12621310 83730716 17825996 60677807 92469077 7148155 55663541 9526476 23884810 7238618 68151793 13029971 87339755 82475413 3338308 44367833 50430781 31875410 63806931 13040338 12455459 12121072 57953591 88379188 57743291 22865104 50978503 88687482 36725608 70561052 33178061 62109489 85871352 91814121 29802978 57020869 43073503 62448381 91819557 90466761 54829533 15603461 65828354 61772468 90807274 37382884 19249379 9517877 20646188 3631235 39531847 89461002 83153463 75646752 19569200 70246055 9332258 37372925 81136283 86719383 58647744 8512334 39106336 84039335 11884100 63744177 64274951 62019805 49019697 71879755 90109919 62758919 54586613 47826418 79038398 13142583 65097569 79805514 79843767 25903241 40455284 79159820 41203717 33496537 55375236 26523661 89778467 83091139 16161544 78596363 82706865 59426806 26590827 29540228 76897672 524171 19320584 63132643 86168164 31732727 70207474 46440791 39246509 47879651 76294317 53278850 88908292 35326020 17646244 33466197 47619936 76476577 79862787 79241752 10741699 79370927 16548017 39413766 16813868\"}";
    const LARGE_PK1: &str = "{\"poly\":\"512  74117004 37307964 513129 84528978 24568017 69250616 24998754 90624658 72893578 10013055 48909397 43599950 7070349 89015072 72449091 4330508 11377051 43663666 84056058 54465960 83139515 79748472 17149047 10359038 85569092 23034830 83299088 62255478 63942911 41055837 53174598 81326653 53316010 9681605 2768836 55547606 83664679 49386228 22120844 51227608 51147653 17580501 13500400 58550201 89760198 38795488 15112978 56144604 25470623 21796250 43334602 41187054 17174093 8856809 13156704 29327672 52231798 73927481 79132539 50942699 12571164 44407377 5253584 38546222 61204616 88691241 38264241 26622422 30036744 91588873 41266086 2135308 59007859 37708634 4216419 52741 44564080 11354178 76897685 44639929 79165868 39860233 76099665 91520406 244078 88784280 31684651 64027276 46651479 36915508 38987521 29640747 1872326 84693223 52980356 69258414 5376274 53061257 50966784 19204661 17964473 43828397 91792796 37956349 57693800 11545894 86622629 27588186 39830343 4321110 45089323 34380007 33544322 7164363 49701907 17543465 32831169 83300474 41700941 58962710 41250677 51532995 29431188 30618478 34633929 2785833 27731533 82680667 21227864 68205425 32453871 9361345 77913450 57715466 86430599 16380374 26248566 92858738 30430930 14152993 90495883 69812036 35345721 90015716 45832377 70433233 61917293 85152580 75863234 43827177 21815179 61467197 66709342 5258442 31647356 30818959 4571634 73804574 6903766 8336161 30873032 27893718 26470853 10862082 39767966 38402014 89052837 34765220 53483791 7064396 91872512 47729142 31602308 7637393 26324183 3113449 5220867 59965110 2163132 19347814 43249264 81937841 82770551 88513445 12168679 79156112 74780959 88563658 33563214 49110726 90225825 34328155 31748647 27596619 34655362 21313121 55997787 63462150 27134212 28479639 38642047 78097013 1238025 79742547 37669422 64400403 65472559 3145642 31392954 5055232 69904542 21806397 2264737 15093448 85995943 38430073 63296904 753357 46441087 75494706 14455721 7612679 58484459 38168780 14921903 4516183 89232713 11145814 58766162 45101268 44432811 83455331 50446747 86171692 27181178 19405663 48803908 76146664 12355513 26475076 44087152 85914074 266633 2654081 36063531 51743829 79094497 76799985 16824189 48987199 18109371 65962094 53257871 43077854 80909521 85946813 88253019 42893256 74655446 27958937 72546014 89660698 61672130 89106844 67260948 81694431 34715621 38900190 86831551 40357528 48609097 2455295 88578893 38531973 14544852 21224115 89702165 21613875 91036247 37455346 52044298 63191536 45339457 23439524 32473498 55741632 67558235 9321669 57356442 69939829 65703890 17945504 87283712 27068782 3995905 67787605 72368967 43088617 87415588 61227009 11443278 72880009 31467601 70783620 4346994 74873549 56825039 81025266 4445718 89385116 68001011 18560435 28111609 22539749 56510737 2640488 52452996 27165615 83325575 37641636 70904285 35735074 83438965 50622890 69795799 22761300 24113907 8661050 67210818 10060291 37755140 32764510 80684260 17803748 61515954 48879455 91749984 29210473 47113555 6341084 2440740 20354556 90789669 7978474 79040670 86044864 13689093 43718595 30051106 19242689 49823933 9630227 1838782 67677109 40534206 11850614 26967790 35466417 46596507 3466721 12250660 18951298 60312567 60268115 4919209 13270068 35382958 68982059 61939590 25050839 20794560 1281251 61219585 61134150 2534472 92305769 25373736 88605700 76331813 35891671 53202626 73061810 88930848 8708615 1832083 7472490 90935376 21150675 22442085 55881558 24040400 29391693 63617156 44785280 20361966 68099974 74394039 55382996 76480510 4530186 42129427 50456651 18147089 56377258 3702565 65991395 16825825 43602978 25503648 75783614 699634 22059650 26745657 58704344 48629732 6192267 51105066 33872990 89726956 30979336 46580571 66764526 61188902 24057555 27092040 3592189 18945782 35388851 20692042 45056277 10388862 22332973 3838336 32093762 13234490 89570523 44156554 28159370 62861393 15301679 73700254 90653355 53552741 6630357 12914473 57331426 73479763 89202592 54844482 72318110 85849306 14390673 14697228 36703152 46319690 92115395 65539504 92434456 9156127 56328351 66286477 9294430 71020311 33923567 84530340 27601570 14793798 42339520 7365836 90532183 57781866 54774822 83746842 12852898 10824309 529425 69142258 35486200 68183282 54919254 76384364 49760438 53748855 38885643 38507341 89549051 44385943 32351821 72033735 17214244 71209529 55221952 44317091 17777302 15345439 81833744 90661254 78398847 7087488 4175350 8700935 44088298 82824556 67719519 77921217 24842987 40152504 48977636 17234227 66881262 88358140 19029512\"}";
    const LARGE_SK: &str = "{\"poly\":\"512  92897626 59 365 72 92897721 70 125 92897679 92897654 92897359 536 372 92897413 134 16 92897596 4 351 370 119 92897340 92897655 242 235 19 92897463 293 92897621 220 123 92897652 149 107 92897467 92897548 92897726 92897694 90 189 7 122 295 92897456 92897580 38 4 162 92897722 92897705 54 92897525 92897636 120 92897659 191 92897691 113 50 138 213 237 92897462 34 68 92897566 38 205 92897678 117 92897264 92897631 168 92897638 92897597 124 79 92897704 343 188 23 92897718 92897573 223 131 206 92897416 92897661 7 92897639 10 92897693 92897602 54 93 92897571 92897664 92897697 92897522 92897466 46 92897705 172 92897624 109 92897385 92897659 37 92897403 49 92897714 92897492 76 92897441 162 92897701 92897300 92897500 92897698 60 206 92897629 92897635 195 92897629 116 282 228 107 92897648 92897631 92897479 151 0 114 92897651 59 92897722 92897646 92897509 92897439 91 92897518 92897405 56 239 92897661 67 92897578 241 92897657 92897513 92897669 134 92897632 133 143 92897266 347 22 10 92897577 126 348 92897663 92897726 33 206 92897524 92897601 92897589 223 92897638 157 222 451 244 208 10 92897690 28 238 92897713 0 113 92897602 92897644 72 230 92897612 157 92897653 92897492 1 92897634 92897436 358 122 92897474 202 88 269 92897345 92897621 89 222 92 358 92897647 92897554 92897705 6 2 92897637 92897651 92897377 61 92897632 166 93 92897391 92897671 135 92897641 261 92897646 92897586 18 199 69 143 174 92897395 262 92897562 46 92897662 234 344 148 115 92897453 92897717 92897452 92897699 92897676 136 92897671 13 92897592 134 92897656 240 92897466 99 417 92897613 20 92897439 92897728 92897602 92897633 92897633 1 92 92897341 92897439 234 92897543 92897543 77 92897694 85 92897506 92897520 92897486 236 195 92897606 92897720 421 166 100 89 110 92897670 92897274 46 92897464 206 148 92897661 92897670 92897565 92897663 154 318 32 92897504 92897578 35 92897530 92897543 141 92897669 38 464 92897652 92897519 166 92897310 10 91 250 97 92897625 92897635 92897347 92897616 92897624 92897627 323 92897484 92897299 92897570 287 210 92897396 129 134 86 87 257 291 14 92897704 92897692 62 92897458 92897707 92897432 92897578 92897629 92897680 92897681 92897640 124 92897577 92897593 282 235 35 92897618 27 92897527 290 50 92897639 307 306 25 92897622 94 325 92897703 92897502 92897573 92897697 92897467 194 92897584 92897691 92897701 88 232 92897661 92897594 92897566 202 92897547 92897717 198 187 122 80 92897451 92897592 92897555 92897542 92897670 97 92897711 92897698 27 179 392 170 92897577 92897678 92897511 92897592 92897656 24 92897506 40 92897702 568 92897698 4 92897689 92897665 95 92897538 92897512 98 92897722 92897517 92897662 92897454 238 129 92897486 92897562 3 92897656 92897580 92897632 92897621 230 59 92897589 92897717 151 497 92897579 92897610 92897689 249 92897711 267 92897489 28 92897352 287 92897557 92897671 221 85 144 108 92897469 175 92897464 22 3 25 92897608 29 92897631 27 341 92897451 93 92897663 92897651 201 134 279 150 88 124 92897725 92897679 92897551 92897626 92897548 92897585 129 132 68 92897506 92897536 92897725 166 318 156 92897576 92897631 92897649 582 92897640 92897388 63 92897693 92897610 92897545 92897578 241 44 105 184 77 38 92897647 13 44 118 193 231 196 92897324 102 92897451\"}";
    const LARGE_CIPHER0: &str = "{\"poly\":\"512  26971262 22119648 37949239 21749440 57211150 25094219 31186147 58576828 47766851 1578009 12931914 87330075 86741547 53374197 21768670 43762946 37809036 14017990 92219119 35881754 73951383 55584555 92457155 56454169 31830378 9073211 24140760 6587960 8528713 30020933 3949558 91143687 31860542 82332715 82397797 84714551 25518511 97012 6154733 47970539 82663620 77545078 39368684 18462353 21790397 28356138 91164025 91981735 92791347 19569867 48418579 61558501 86560764 35211820 4561614 82544901 64059152 90782410 17256399 24879531 1978383 73542409 3246024 46400834 35161159 61829253 75510226 86972605 53527754 81933350 39219110 79998433 69713801 26621328 65902398 68856589 45631094 1977698 64486331 30203043 80679023 40129763 67515880 19862132 53839123 75306888 92850559 25652821 74012931 5234314 85866707 71977539 16769098 47210986 7006346 63343071 10103950 29506799 50327295 13659262 11883375 77121368 46697170 15045123 37252619 70062105 68199556 83717779 14469456 29371472 16063975 38825287 4168484 79217715 34930135 54876510 54317335 30965370 22338143 3120796 24735118 63043735 21697141 41595795 65981799 3618879 69352133 88241294 20576029 43975365 63487901 42010049 75642256 8710409 75857693 12221864 3217666 8234977 13835751 56260071 10536670 37188532 66965214 37143905 87541334 24158198 15072781 40609696 40139944 22050472 17999496 31280397 26540706 9869540 22758817 48311664 22210437 75158592 56617979 13673774 56069163 68251057 87869961 47673544 16846895 75422159 59087672 27224018 70186825 45026276 15314246 31724162 63240770 66917078 78980337 80159955 92846599 64649770 10099453 834482 7497082 70529130 62829742 49130290 41018631 34941066 53613557 1926654 61312419 7509992 42880684 84968844 46388521 79211593 64746343 53744356 44827466 64155550 5769053 8662367 64544631 6516873 14840728 16616152 50700007 36672620 85346436 66236806 89638306 12951140 63524604 89065291 53724874 55694923 35214587 25595726 17333384 43648209 66073270 57977067 70171087 862482 80404071 41896354 71664503 1713784 68277749 50172060 8847722 12581426 43994892 56780642 65882862 91534466 64416415 71717649 60851799 21927251 11495631 16024929 62038610 31568868 33029937 23702762 65817482 44635827 34854418 54768406 31363875 22541110 77718560 16482389 16731772 10430998 32350401 57604711 83088689 81406703 75295724 37068089 30947734 55078566 50660053 33086610 10998346 47235551 61082441 5827476 54581120 55685862 9460245 2710645 72368668 46986873 12082454 41333529 61707883 15799329 70897838 2236775 51764566 77658701 91601523 45365283 88395590 59747340 26551051 67466140 53679119 21870294 16846412 35287128 74766300 6680352 85720184 61376200 33134293 57844842 60938205 22639032 70764198 12353922 90734466 88795676 43461319 56339156 9701337 75176338 52989296 6089864 63044025 25245376 64180139 55643240 13658153 49785694 74032243 13665303 42138464 54181023 27072272 73484027 25882125 59022074 30734307 65126187 56814208 16584870 37964248 78420380 33989439 52630116 69792905 68934987 51828556 25248310 20065040 10545000 90862376 68172605 5979976 46667329 84537316 12820988 74430905 77486777 52009782 48050729 15876030 43531915 60581374 88727262 5744745 46012778 46459613 32348471 91604639 91672426 80630416 14468169 65624151 73708061 33470113 19369876 66766019 11219594 26469251 18010089 8765947 90786232 50712846 91667273 79562918 35902781 79207342 73140968 53876239 50106670 46138905 18902908 31093805 46309340 37716337 84763972 57291578 71759341 8136807 15673575 35363204 20495644 40211017 13248134 12697146 58729000 58966299 32232787 7675204 65863075 24776492 75970381 73033951 23581369 54882724 37680788 40207586 33432229 51672720 21632293 8136471 60299736 54710194 46366058 88671422 2894170 76247348 64509006 66009154 10888705 88593716 29152612 41492817 15911926 58053241 62220765 77469141 41287232 6037617 887269 46460910 51141553 7190542 85696279 59607638 52258897 51298571 67236490 89150141 84408627 4490369 13155987 693853 2596269 31590445 4242277 49220797 42338779 31200744 80601212 60233206 39976820 40386018 62514871 46250670 82744497 65004997 89555231 61557773 88222442 63306905 15584895 56873402 15134717 31155242 46032795 26152122 6235521 87497167 63149798 84684339 92012896 15041238 83333883 21869773 7050480 61445400 31729828 75807223 9160866 89089611 91821363 57164371 35693925 48788608 6278686 82594759 57824921 63283652 71461200 56174942 59689273 77326008 35030700 881864 84206096 5320433 18209512 81529926 28164252 4860761 64003035 28728622 47578207 57163369 55168065 56782576 13567799 79181379 19561963 29909378 34238964 15647598 79896200\"}";
    const LARGE_CIPHER1: &str = "{\"poly\":\"512  31341647 28196391 8593460 86265657 53755708 20993233 58823901 70182280 63329452 7667 79997224 58582992 51461712 88957598 4080687 71507435 72019477 83008924 28635657 17356269 28760885 21589570 14883588 89950682 84219957 41657780 56269729 67156975 17396380 23486308 36013984 54081268 48565059 84725397 73357196 6790099 88524291 489952 51470337 29896735 66954337 26918483 7219056 42228907 85079489 81724332 91447037 30089470 4086281 57187634 48468130 86645511 44519192 67410243 85437388 69412581 76214382 64706881 15692856 46393467 63339418 1818812 59978709 70708997 57074002 74449240 5982359 59216511 66176848 60496162 44765080 841356 27867852 55346720 10567481 30888956 83208796 74028921 72750824 38209660 69019742 9278076 84630284 71912080 32695596 59367382 50025465 66012717 85972156 16194960 50834920 88687486 9369343 24515824 85748339 88727941 53280757 39919255 73426453 82263503 30942924 77507675 81533543 2435795 77882985 64116752 78828334 12123531 11742695 31599909 72849318 18710882 21713809 16082192 66194596 82358068 9292636 20084480 10563999 15877877 35997555 43619357 67168931 38165278 2312203 53771653 50174942 34711529 22482394 91112125 21566030 27641311 4273234 71348950 35477856 80447133 36651885 57350006 65602233 9731908 45220777 92166824 32156547 14153855 81988036 9222579 59885699 1268335 89471698 38134178 42179266 8806073 4906932 19855299 37723379 12522680 64179516 4650110 57538628 12885020 19768300 21928399 41184549 55731681 85000561 30584763 46442513 65811558 43116573 2390092 81567933 66789288 363406 67491850 43764813 35667275 725788 930227 35546078 69102978 69906951 16050754 18323800 92439661 63994906 89602882 85578428 46870242 65591849 66967519 13232369 88283352 66622430 78729101 11103666 9042148 80507846 77467491 29356404 54833695 9462989 28964310 42073501 77249191 70747076 33408896 81563230 59647754 5015667 30834007 30799295 57481997 46293880 68602183 49204923 13655947 62848562 80894190 81822950 5136322 86165207 24120922 70126619 79208360 77494175 74091507 49354357 85469309 59069702 2059084 55901330 86195038 39347791 48432198 18122422 71943000 27615881 54954701 33687563 31586200 28336154 31530974 52611856 12775092 14719505 64018860 28011287 44854120 35338883 77693310 11576338 86886484 39596427 78241962 21153928 10831214 29437249 9327880 26644271 89682907 6827520 53310484 71993811 82666763 46846671 31334270 92955 91269192 65682094 12901436 38911355 22431971 58419000 42436568 84464852 60952779 41414586 88254909 10972964 59144608 55334558 54215997 4231744 19935918 90034745 35580419 65196319 57877676 83135930 66955907 78665578 32257784 87044733 20516273 67626653 21629137 48233370 54651906 60260913 45974243 65632488 6930207 38923652 78988880 78126473 49506028 23100309 2263150 86028931 24855489 24552637 24827030 89795073 67901860 26809267 1222244 87012714 28256842 7334451 26182893 3054611 8158300 59694077 10580704 66489158 7416155 52287978 86913783 57585158 21669432 2792173 83095459 49108550 85620450 22699051 77087876 34597066 25649020 71912045 15693734 3173835 52961417 46235004 87462818 60875476 28272805 44520651 55786152 28763366 15255129 7902474 78474399 26582471 67550825 77170968 19923246 87110409 76736052 70115816 75063183 77664891 69939155 1877864 65744803 47644213 70130643 64422137 85013056 76100859 82566812 41345492 84683083 78800355 42415382 21621969 21479020 14281411 59376184 12090291 57043112 34854557 79532864 37948812 55608668 46172928 53771403 49189668 91413539 5507941 75435709 22865316 35959191 71827855 3203409 39257075 77656614 75435541 17845045 62556967 23450483 35249067 11339583 61418171 61162377 89652677 38793434 25426362 89333365 53062840 28133379 12839613 28507282 35432727 80725280 34467041 65682780 19010478 1134982 47129352 9073251 26081876 49088866 75584465 62998893 70581960 34366288 54891440 14987943 35585455 6537437 32801997 87070633 86186700 10664788 50273900 79555628 24352095 23483934 48520223 21171897 68054458 83211697 25164716 9364470 16759129 31370233 28618661 73350928 69035966 91137480 31586804 31269200 20011391 9180366 32941306 40267151 5791455 65907573 72495828 74749065 37841118 14133417 78864206 47895863 88324748 78362442 59711583 69609816 77193031 44813855 55680152 14673943 54222406 65766116 81146312 24106241 88216347 68188953 74731986 87735035 8510305 87179924 25666063 681846 57088779 37819288 27642839 7824563 86435865 69540365 4994296 9545665 45865209 33573036 43978073 60026254 29957061 21465740 91138884 84933653 55919746 44220091 44229463 24354189 58768130 80813473 42061935 65002969 69045907 50825281 50323938 26726445\"}";

    /// This was previously generated by [`RingLPR::gen`]
    /// with the parameters set in [`RingLPR::default`].
    const SMALL_PK0: &str =
        "{\"poly\":\"16  2328 637 2200 149 2177 1070 1412 1865 2321 1608 2340 2145 1431 740 368 556\"}";
    const SMALL_PK1: &str =
        "{\"poly\":\"16  480 1934 2216 296 3 1576 2255 1137 1631 2167 1322 1823 93 15 1749 1976\"}";
    const SMALL_SK: &str = "{\"poly\":\"16  2395 3 2396 0 2398 8 2397 2 2396 4 3 0 1 5 3 3\"}";
    const SMALL_CIPHER0: &str =
        "{\"poly\":\"16  1689 12 1037 381 1212 847 220 2169 2006 739 713 1329 1585 290 891 1972\"}";
    const SMALL_CIPHER1: &str =
        "{\"poly\":\"16  120 274 282 1258 1404 581 1969 2206 1747 1413 1179 259 1367 2394 2275 1253\"}";

    /// Loads one of the above precomputed public key suitable to:
    /// - [`SizeN::Small`]: [`RingLPR::default`]
    /// - [`SizeN::Large`]: [`RingLPR::secure128`]
    pub(super) fn load_precomputed_pk(size_n: &SizeN) -> (PolynomialRingZq, PolynomialRingZq) {
        if size_n == &SizeN::Large {
            let modulus =
                qfall_crypto::utils::common_moduli::new_anticyclic(512, 92897729).unwrap();

            let poly0: PolyOverZ = serde_json::from_str(LARGE_PK0).unwrap();
            let poly1: PolyOverZ = serde_json::from_str(LARGE_PK1).unwrap();

            let pk0 = PolynomialRingZq::from((poly0, &modulus));
            let pk1 = PolynomialRingZq::from((poly1, &modulus));

            (pk0, pk1)
        } else {
            let modulus = qfall_crypto::utils::common_moduli::new_anticyclic(16, 2399).unwrap();

            let poly0: PolyOverZ = serde_json::from_str(SMALL_PK0).unwrap();
            let poly1: PolyOverZ = serde_json::from_str(SMALL_PK1).unwrap();

            let pk0 = PolynomialRingZq::from((poly0, &modulus));
            let pk1 = PolynomialRingZq::from((poly1, &modulus));

            (pk0, pk1)
        }
    }

    /// Loads one of the above precomputed secret key suitable to:
    /// - [`SizeN::Small`]: [`RingLPR::default`]
    /// - [`SizeN::Large`]: [`RingLPR::secure128`]
    pub(super) fn load_precomputed_sk(size_n: &SizeN) -> PolynomialRingZq {
        if size_n == &SizeN::Large {
            let modulus =
                qfall_crypto::utils::common_moduli::new_anticyclic(512, 92897729).unwrap();
            let poly: PolyOverZ = serde_json::from_str(LARGE_SK).unwrap();
            let sk = PolynomialRingZq::from((poly, &modulus));

            sk
        } else {
            let modulus = qfall_crypto::utils::common_moduli::new_anticyclic(16, 2399).unwrap();
            let poly: PolyOverZ = serde_json::from_str(SMALL_SK).unwrap();
            let sk = PolynomialRingZq::from((poly, &modulus));

            sk
        }
    }

    /// Loads one of the above precomputed ciphers suitable to:
    /// - [`SizeN::Small`]: [`RingLPR::default`]
    /// - [`SizeN::Large`]: [`RingLPR::secure128`]
    pub(super) fn load_precomputed_cipher(size_n: &SizeN) -> (PolynomialRingZq, PolynomialRingZq) {
        if size_n == &SizeN::Large {
            let modulus =
                qfall_crypto::utils::common_moduli::new_anticyclic(512, 92897729).unwrap();

            let poly0: PolyOverZ = serde_json::from_str(LARGE_CIPHER0).unwrap();
            let poly1: PolyOverZ = serde_json::from_str(LARGE_CIPHER1).unwrap();

            let cipher0 = PolynomialRingZq::from((poly0, &modulus));
            let cipher1 = PolynomialRingZq::from((poly1, &modulus));

            (cipher0, cipher1)
        } else {
            let modulus = qfall_crypto::utils::common_moduli::new_anticyclic(16, 2399).unwrap();

            let poly0: PolyOverZ = serde_json::from_str(SMALL_CIPHER0).unwrap();
            let poly1: PolyOverZ = serde_json::from_str(SMALL_CIPHER1).unwrap();

            let cipher0 = PolynomialRingZq::from((poly0, &modulus));
            let cipher1 = PolynomialRingZq::from((poly1, &modulus));

            (cipher0, cipher1)
        }
    }

    /// Loads one of the above precomputed variants suitable to:
    /// - [`SizeN::Small`]: [`RingLPR::default`]
    /// - [`SizeN::Large`]: [`RingLPR::secure128`]
    pub(super) fn load_suiting_ring_lpr(size_n: &SizeN) -> RingLPR {
        if size_n == &SizeN::Large {
            RingLPR::secure128()
        } else {
            RingLPR::default()
        }
    }
}

/// This module contains all functions directly executed in the benchmarking functions.
pub(super) mod performed_functions {
    use super::load_precomputed_values::*;
    use crate::SizeN;
    use qfall_crypto::construction::pk_encryption::PKEncryptionScheme;
    use qfall_crypto::construction::pk_encryption::RingLPR;
    use qfall_math::integer::Z;

    /// Performs a full-cycle of gen, enc, dec with [RingLPR].
    pub(super) fn ring_lpr_full_cycle_dyn(n: i64) {
        let msg = Z::ONE;
        let ring_lpr = RingLPR::new_from_n(n);

        let (pk, sk) = ring_lpr.gen();
        let cipher = ring_lpr.enc(&pk, &msg);
        let _ = ring_lpr.dec(&sk, &cipher);
    }

    /// Performs a cycle of `enc` and `dec` with precomputed [`RingLPR`] parameters and keys and 128-bit security.
    pub(super) fn ring_lpr_cycle(size_n: &SizeN) {
        let msg = Z::from(15);
        let ring_lpr = load_suiting_ring_lpr(size_n);

        let pk = load_precomputed_pk(size_n);
        let sk = load_precomputed_sk(size_n);

        let cipher = ring_lpr.enc(&pk, &msg);
        let _ = ring_lpr.dec(&sk, &cipher);
    }

    /// Performs a cycle of `enc` with precomputed [`RingLPR`] parameters and keys and 128-bit security.
    pub(super) fn ring_lpr_enc(size_n: &SizeN) {
        let msg = Z::from(15);
        let ring_lpr = load_suiting_ring_lpr(size_n);

        let pk = load_precomputed_pk(size_n);

        let _ = ring_lpr.enc(&pk, &msg);
    }

    /// Performs a cycle of `dec` with precomputed [`RingLPR`] parameters and keys and 128-bit security.
    pub(super) fn ring_lpr_dec(size_n: &SizeN) {
        let cipher = load_precomputed_cipher(size_n);
        let ring_lpr = load_suiting_ring_lpr(size_n);

        let sk = load_precomputed_sk(size_n);

        let _ = ring_lpr.dec(&sk, &cipher);
    }
}

/// Benchmark [ring_lpr_full_cycle_dyn] with `n = 8, 16, 32, 64, 128, 256, 512, 1024`
///
/// This benchmark can be run with for example:
/// - `cargo criterion "RingLPR\ n\ sweep"`
/// - `cargo criterion RingLPR\ n\ sweep/n=16` (only run the n=16 benchmark).
/// - `cargo criterion 'RingLPR.*n=16'` (only run the n=16 benchmark).
/// - `cargo bench --bench benchmarks RingLPR\ n\ sweep`
///
/// Shorter variants or regex expressions can also be used to specify the
/// benchmark name. The `\ ` is used to escape the space, alternatively,
/// quotation marks can be used.
fn bench_ring_lpr_full_cycle_n_sweep(c: &mut Criterion) {
    let mut group = c.benchmark_group("RingLPR n sweep");

    for n in [16, 32, 64, 128, 256, 512, 1024].iter() {
        group.bench_function(format!("n={n}"), |b| b.iter(|| ring_lpr_full_cycle_dyn(*n)));
    }

    group.finish();
}

/// Benchmark [ring_lpr_full_cycle_dyn] with `n = 512`.
///
/// This benchmark can be run with for example:
/// - `cargo criterion RingLPR\ n=512`
/// - `cargo bench --bench benchmarks RingLPR\ n=512`
/// - `cargo flamegraph --bench benchmarks -- --bench RingLPR\ n=512`
///
/// Shorter variants or regex expressions can also be used to specify the
/// benchmark name. The `\ ` is used to escape the space, alternatively,
/// quotation marks can be used.
fn bench_ring_lpr_large_full_cycle(c: &mut Criterion) {
    c.bench_function("RingLPR n=512 gen enc dec", |b| {
        b.iter(|| ring_lpr_full_cycle_dyn(512))
    });
}

/// Benchmark [ring_lpr_cycle] with `n = 512` and precomputed keys.
fn bench_ring_lpr_large_cycle(c: &mut Criterion) {
    c.bench_function("RingLPR n=512 enc dec", |b| {
        b.iter(|| ring_lpr_cycle(&SizeN::Large))
    });
}

/// Benchmark [ring_lpr_enc] with `n = 512` and precomputed keys.
fn bench_ring_lpr_large_enc(c: &mut Criterion) {
    c.bench_function("RingLPR n=512 enc", |b| {
        b.iter(|| ring_lpr_enc(&SizeN::Large))
    });
}

/// Benchmark [ring_lpr_dec] with `n = 512` and precomputed keys.
fn bench_ring_lpr_large_dec(c: &mut Criterion) {
    c.bench_function("RingLPR n=512 dec", |b| {
        b.iter(|| ring_lpr_dec(&SizeN::Large))
    });
}

/// Benchmark [ring_lpr_full_cycle_dyn] with `n = 16`.
fn bench_ring_lpr_small_full_cycle(c: &mut Criterion) {
    c.bench_function("RingLPR n=16 gen enc dec", |b| {
        b.iter(|| ring_lpr_full_cycle_dyn(16))
    });
}

/// Benchmark [ring_lpr_cycle] with `n = 16` and precomputed keys.
fn bench_ring_lpr_small_cycle(c: &mut Criterion) {
    c.bench_function("RingLPR n=16 enc dec", |b| {
        b.iter(|| ring_lpr_cycle(&SizeN::Small))
    });
}

/// Benchmark [ring_lpr_enc] with `n = 16` and precomputed keys.
fn bench_ring_lpr_small_enc(c: &mut Criterion) {
    c.bench_function("RingLPR n=16 enc", |b| {
        b.iter(|| ring_lpr_enc(&SizeN::Small))
    });
}

/// Benchmark [ring_lpr_dec] with `n = 16` and precomputed keys.
fn bench_ring_lpr_small_dec(c: &mut Criterion) {
    c.bench_function("RingLPR n=16 dec", |b| {
        b.iter(|| ring_lpr_dec(&SizeN::Small))
    });
}

criterion_group!(
    benches,
    bench_ring_lpr_full_cycle_n_sweep,
    bench_ring_lpr_large_full_cycle,
    bench_ring_lpr_large_cycle,
    bench_ring_lpr_large_enc,
    bench_ring_lpr_large_dec,
    bench_ring_lpr_small_full_cycle,
    bench_ring_lpr_small_cycle,
    bench_ring_lpr_small_enc,
    bench_ring_lpr_small_dec,
);
